#lang racket

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
  (if (element-of-set? x set)
      set
      (cons x set)))
(define (intersection-set xs ab)
  (if (or (null? xs) (null? ab))
      '()
      (let ((x1 (car xs)) (x2 (car ab)))
        (cond ((= x1 x2)
               (cons x1 (intersection-set (cdr xs)
                                          (cdr ab))))
              ((< x1 x2)
               (intersection-set (cdr xs) ab))
              ((< x2 x1)
               (intersection-set xs (cdr ab)))))))
(define (union-set xs ab)
  (cond ((and (null? xs) (not (null? ab)))
         (ab))
        ((and (null? ab) (not (null? xs)))
         (xs))
        ((and (null? ab) (null? xs))
         '())
        ((element-of-set? (car xs) (cdr ab))
         (union-set (cdr xs) (cdr ab)))
        ((equal? (car xs) (car ab))
         (adjoin-set (car xs) (union-set (cdr xs) (cdr ab))))
        (else
         (adjoin-set (car xs)
                     (adjoin-set (car ab) (union-set (cdr xs) (cdr ab)))))))
(union-set '(1 2 3) '(3 4 5))
